[
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "1 Source Code\nThe following represents my solution to the challenge contained in the “Into the Tidyverse Chapter”. The file paths have been changed to enable syntax highlighted rendering.\n\nlibrary(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.1     ✔ readr     2.1.4\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#&gt; ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#&gt; ✔ purrr     1.0.1     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(readxl)\nlibrary(lubridate)\nlibrary(writexl)\n\nbikes &lt;- read_excel(\"../../ds_data/01_bike_sales/01_raw_data/bikes.xlsx\")\norderlines &lt;- read_excel(\"../../ds_data/01_bike_sales/01_raw_data/orderlines.xlsx\")\n\n#&gt; New names:\n#&gt; • `` -&gt; `...1`\n\nbikeshops &lt;- read_excel(\"../../ds_data/01_bike_sales/01_raw_data/bikeshops.xlsx\")\n\n## Wrangle Data\n\nbike_orderlines &lt;- orderlines %&gt;%\n  left_join(bikes, by = c(\"product.id\" = \"bike.id\")) %&gt;%\n  left_join(bikeshops, by = c(\"customer.id\" = \"bikeshop.id\"))\n\nbike_orderlines_wrangled &lt;- bike_orderlines %&gt;%\n  separate(col = category,\n           into = c(\"category.1\",\"category.2\",\"category.3\"),\n           sep = \" - \") %&gt;%\n  separate(col = location,\n           into = c(\"city\",\"state\"),\n           sep = \", \") %&gt;%\n  mutate(total.price = price * quantity) %&gt;%\n  select(-...1, -gender)%&gt;%\n  select(-ends_with(\".id\"))%&gt;%\n  bind_cols(bike_orderlines %&gt;% select(order.id)) %&gt;%\n  select(order.id, contains(\"order\"), contains(\"model\"), contains(\"category\"),\n         price, quantity, total.price,\n         everything()) %&gt;%\n  rename(bikeshop = name) %&gt;%\n  set_names(names(.) %&gt;% str_replace_all(\"\\\\.\", \"_\"))\n\n# Sales By State\nsales_by_state &lt;- bike_orderlines_wrangled %&gt;% \n  select(total_price, state) %&gt;% \n  group_by(state) %&gt;% \n  summarise(sales = sum(total_price)) %&gt;% \n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\nsales_by_state %&gt;% \n  ggplot(aes(x = state, y = sales))+\n  geom_col(fill = \"#2DC6D6\")+\n  geom_label(aes(label = sales_text))+\n  geom_smooth(method = \"lm\", se = FALSE)+\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  labs(\n    title    = \"Revenue by state\",\n    subtitle = \"Upward Trend\",\n    x = \"\", # Override defaults for x and y\n    y = \"Revenue\"\n  )+ theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n#&gt; `geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n#Sales by State and year\nsales_by_state_year &lt;- bike_orderlines_wrangled %&gt;% \n  select(total_price, state, order_date) %&gt;% \n  mutate(year = year(order_date)) %&gt;% \n  group_by(state, year) %&gt;% \n  summarise(sales = sum(total_price)) %&gt;% \n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\n#&gt; `summarise()` has grouped output by 'state'. You can override using the\n#&gt; `.groups` argument.\n\nsales_by_state_year %&gt;%\n  ggplot(aes(x = year, y = sales, fill = state)) +\n  geom_col() +\n  facet_wrap(~ state) +\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  labs(\n    title = \"Revenue by year and state\",\n  )"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#header-2",
    "href": "content/01_journal/01_tidyverse.html#header-2",
    "title": "Tidyverse",
    "section": "\n2.1 Header 2",
    "text": "2.1 Header 2\nHeader 3\nHeader 4\nHeader 5\nHeader 6"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "1 Grabbing Temperature data from an API\n\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(tidyverse)\nlibrary(gridExtra)\nlibrary(ggplot2)\n\n# Grab Weather API\nresp &lt;- GET(\"https://api.open-meteo.com/v1/forecast?latitude=53.55&longitude=9.99&hourly=temperature_2m\")\nhourly_temp &lt;- rawToChar(resp$content) %&gt;% fromJSON() \ntime &lt;- hourly_temp[[\"hourly\"]][1]\ntemp &lt;- hourly_temp[[\"hourly\"]][2]\n\ndata &lt;- data.frame(time, temp) %&gt;% head(n = 30)\ndata %&gt;% \n  ggplot(aes(x = time, y = temperature_2m)) +\n  geom_col() +\n  labs(\n    title = \"Hourly Temperature in Hamburg, Germany\",\n  ) + theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n2 Scraping Rosebikes Mountainbike category\n\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(readr)\n\nurl &lt;- \"https://www.rosebikes.de/fahrr%C3%A4der/mtb\"\n\nhtml &lt;- url %&gt;% \n  read_html()\n\nbike_name &lt;- html %&gt;% \n  html_nodes(\"h4.basic-headline__title\") %&gt;% \n  html_text()\n\nprice &lt;- html %&gt;% \n  html_nodes(\"div.catalog-category-bikes__price-title\") %&gt;% \n  html_text() %&gt;% \n  parse_number(locale = locale(decimal_mark = \",\", grouping_mark = \".\"))\n\ndata &lt;- data.frame(bike_name, price)\nprint(data)\n\n#&gt;          bike_name price\n#&gt; 1       COUNT SOLO   749\n#&gt; 2      PSYCHO PATH  1499\n#&gt; 3      THRILL HILL  2999\n#&gt; 4 ROOT MILLER PLUS  4999\n#&gt; 5   GROUND CONTROL  1999\n#&gt; 6      ROOT MILLER  2299\n#&gt; 7           BONERO  1499\n#&gt; 8        SOUL FIRE  1999\n#&gt; 9        THE BRUCE   899"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "#Data Wrangling Challenges\n\nlibrary(tidyverse)\nlibrary(vroom)\nlibrary(dplyr)\nlibrary(httr)\nlibrary(jsonlite)\n\n# Import Data \n\ncol_types &lt;- list(\n  id = col_character(),\n  type = col_character(),\n  number = col_character(),\n  country = col_character(),\n  date = col_date(\"%Y-%m-%d\"),\n  abstract = col_character(),\n  title = col_character(),\n  kind = col_character(),\n  num_claims = col_double(),\n  filename = col_character(),\n  withdrawn = col_double()\n)\n\npatent_tbl &lt;- vroom(\n  file       = \"patent.tsv\", \n  delim      = \"\\t\", \n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\n#&gt; Warning: The following named parsers don't match the column names: type,\n#&gt; number, country, abstract, title, kind, filename, withdrawn\n\npatent_assignee &lt;- vroom(\n  file = \"patent_assignee.tsv\",\n  delim = \"\\t\",\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\n#&gt; Rows: 315910 Columns: 2\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \"\\t\"\n#&gt; chr (2): patent_id, assignee_id\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nassignee &lt;- vroom(\n  file = \"assignee.tsv\",\n  delim = \"\\t\",\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\n#&gt; Rows: 47011 Columns: 3\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \"\\t\"\n#&gt; chr (2): id, organization\n#&gt; dbl (1): type\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nuspc &lt;- vroom(\n  file = \"uspc.tsv\",\n  delim = \"\\t\",\n  col_types = list(\n    patent_id = col_character()\n  ),\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\n# Join Tables\ndata &lt;- left_join(patent_tbl, patent_assignee, by = c(\"id\" = \"patent_id\"))\ndata &lt;- left_join(data, assignee, by = c(\"assignee_id\" = \"id\")) \n# Patent Dominance\ndominance &lt;- data %&gt;% \n  select(organization, num_claims) %&gt;% \n  group_by(organization) %&gt;% \n  summarise(claims = sum(num_claims))\ndominance_cleaned &lt;- dominance[dominance$organization != 'NA',]\n\ndominance_sorted &lt;- dominance_cleaned[order(dominance_cleaned$claims,decreasing=TRUE),]\n  \nhead(dominance_sorted, n=10)\n\n\n\n  \n\n\n#Recent Patent Activity\naugust2014 &lt;- data[format.Date(data$date, \"%m\")==\"08\" & !is.na(data$date),] %&gt;% \n  select(organization, num_claims) %&gt;% \n  group_by(organization) %&gt;% \n  summarise(claims = sum(num_claims))\n\naugust2014_cleaned &lt;- august2014[august2014$organization != 'NA',]\n\naugust2014_sorted &lt;- august2014_cleaned[order(august2014_cleaned$claims,decreasing=TRUE),]\n\nhead(august2014_sorted,n=10)\n\n\n\n  \n\n\n#Innovation in Tech\ninno &lt;- left_join(assignee, patent_assignee, by = c(\"id\" = \"assignee_id\"))\ninno &lt;- left_join(inno, uspc, by = c(\"patent_id\" = \"patent_id\"))\n\n#&gt; Warning in left_join(inno, uspc, by = c(patent_id = \"patent_id\")): Detected an unexpected many-to-many relationship between `x` and `y`.\n#&gt; ℹ Row 1 of `x` matches multiple rows in `y`.\n#&gt; ℹ Row 376875 of `y` matches multiple rows in `x`.\n#&gt; ℹ If a many-to-many relationship is expected, set `relationship =\n#&gt;   \"many-to-many\"` to silence this warning.\n\n\n#&gt; Warning: One or more parsing issues, call `problems()` on your data frame for details,\n#&gt; e.g.:\n#&gt;   dat &lt;- vroom(...)\n#&gt;   problems(dat)\n\ninno_cleaned &lt;- inno[!duplicated(inno$patent_id),]\ninno_cleaned_2 &lt;- inno_cleaned[inno_cleaned$id != 'NA',]\n\n#Create Filter from previous task\norgs &lt;- head(dominance_sorted$organization, 10)\n\n#Apply Filter\ninno_orgs &lt;- inno %&gt;% \n  filter(organization %in% orgs) %&gt;% \n  select(organization, mainclass_id) %&gt;% \n  count(mainclass_id, sort = TRUE)\n\ninno_orgs_final &lt;- inno_orgs[-1,] %&gt;% \n  head(n=5)\n\ngetMainId &lt;- function(x){\n  url &lt;- sprintf('https://api.patentsview.org/uspc_mainclasses/query?q={\"uspc_mainclass_id\":%s}&f=[\"uspc_mainclass_title\"]',x[1])\n  resp &lt;- GET(url)\n  content &lt;- rawToChar(resp$content) %&gt;% \n    fromJSON()\n  \n  class &lt;- content[[\"uspc_mainclasses\"]][[1]]\n  return(class)\n}\n\nnames &lt;- apply(inno_orgs_final,1,getMainId)\n\ninno_orgs_final %&gt;% \n  mutate(type = names) %&gt;% \n  head(n=5)"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "1 Covid Cases by Country\n\nlibrary(tidyverse)\n\n# Import Data\ncovid_data_tbl &lt;- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\")\n\n#&gt; Rows: 304424 Columns: 67\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr   (4): iso_code, continent, location, tests_units\n#&gt; dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#&gt; date  (1): date\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncountries &lt;- covid_data_tbl %&gt;%\n  group_by(location) %&gt;% \n  group_split(.keep = TRUE)\n\n#Create Filter \nfilter &lt;- c(\"Germany\", \"United States\", \"United Kingdom\", \"France\", \"Spain\")\n\n\ngetCountry &lt;- function(x, country){\n  countries_select &lt;- data.frame()\n  for(i in 1:length(x)){\n    if(x[[i]]$location[[1]] %in% country){\n      return (x[[i]])\n    } else {\n      next\n    }\n  }\n  return (countries_select)\n}\n#Grab Countries\nselection &lt;- getCountry(countries, c(\"Germany\")) %&gt;% \n  rbind(getCountry(countries, c(\"United States\"))) %&gt;% \n  rbind(getCountry(countries, c(\"United Kingdom\"))) %&gt;% \n  rbind(getCountry(countries, c(\"France\"))) %&gt;% \n  rbind(getCountry(countries, c(\"Spain\")))\n \nselection %&gt;% \n  ggplot(aes(date, total_cases, color = location))+\n  geom_line(linewidth = 1) + \n  scale_y_continuous(labels = scales::comma) +\n  theme(\n    legend.position = \"bottom\",\n  ) + \n  labs(\n    title = \"Total Covid Cases by country\",\n    subtitle = \"Sales Trending Upward\",\n    x = \"\",\n    y = \"Total Cases\",\n    color = \"Country\",\n  )\n\n#&gt; Warning: Removed 83 rows containing missing values (`geom_line()`).\n\n\n\n\n\n\n\n#\n\n\n2 Covid Mortality\n\nlibrary(tidyverse)\n\n# Import Data\ncovid_data_tbl &lt;- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\")\n\n#&gt; Rows: 304585 Columns: 67\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr   (4): iso_code, continent, location, tests_units\n#&gt; dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#&gt; date  (1): date\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n#Prepare Data\ndata &lt;- covid_data_tbl %&gt;% \n  select(location, total_deaths) %&gt;% \n  group_by(location) %&gt;% \n  slice_max(order_by = total_deaths, n = 1) %&gt;% \n  mutate(location = case_when(\n    \n    location == \"United Kingdom\" ~ \"UK\",\n    location == \"United States\" ~ \"USA\",\n    location == \"Democratic Republic of Congo\" ~ \"Democratic Republic of the Congo\",\n    TRUE ~ location\n    \n  )) %&gt;%\n  distinct()\n#Remove unneeded rows\ndata &lt;- data[!grepl(\"World\", data$location),]\ndata &lt;- data[!grepl(\"income\", data$location),]\ndata &lt;- data[!grepl(\"Europe\", data$location),]\ndata &lt;- data[!grepl(\"North America\", data$location),]\ndata &lt;- data[!grepl(\"South America\", data$location),]\ndata &lt;- data[!grepl(\"Asia\", data$location),]\n\n#Import map\nworld &lt;- map_data(\"world\")\n\np &lt;- ggplot() +\n  geom_map(data = world, map = world,\n           aes(x = long, y = lat, group = group, map_id=region),\n           fill = \"white\", colour = \"#7f7f7f\", linewidth = 0.5) +\n  geom_map(data = data, map=world,\n           aes(fill=total_deaths, map_id=location, color = total_deaths),\n           colour=\"#7f7f7f\", linewidth=0.5)  +\n  scale_fill_continuous(low=\"red\", high=\"black\", guide=\"colorbar\") +\n  scale_y_continuous(breaks=c()) +\n  scale_x_continuous(breaks=c()) +\n  labs(fill=\"legend\", title=\"Covid Mortality\", x=\"\", y=\"\") +\n  theme_bw()\n\n#&gt; Warning in geom_map(data = world, map = world, aes(x = long, y = lat, group =\n#&gt; group, : Ignoring unknown aesthetics: x and y\n\np"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/03_other/06_links.html#r-and-r-studio",
    "href": "content/03_other/06_links.html#r-and-r-studio",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual ."
  },
  {
    "objectID": "content/03_other/06_links.html#additional-r-resources",
    "href": "content/03_other/06_links.html#additional-r-resources",
    "title": "Links",
    "section": "",
    "text": "Google is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own."
  }
]